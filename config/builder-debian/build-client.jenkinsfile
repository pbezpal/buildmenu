#!groovy

String BRANCH = "${params.BRANCH}"
String VERSION = "${params.VERSION}"
String BUILD_CMD = "${params.BUILD_CMD}"
String TYPE = "${params.TYPE}"
String GIT_URL = "${params.GIT_URL}"
String BUILD_TIME = "${params.BUILD_TIME}"
String BUILD_TYPE = "${params.BUILD_TYPE}"
String CURRENT_DATE = new Date().format('yyyy-MM-dd-HH-mm', TimeZone.getTimeZone("Europe/Moscow"))
String FOLDER = "${CURRENT_DATE}-${params.VERSION}-${BUILD_NUMBER}"
String REPO = null

def is_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command    
        }catch(err){
            currentBuild.result = 'FAILURE'
            error(text)
        }
    }
}

pipeline{
    agent {
        label 'debian'
    }
    options { timestamps () }
    stages{
      
      stage("Cleaning the build directory"){
        steps{
          deleteDir();
        }
      }
      stage("Cloning from a git repository"){
        steps{
          echo "========== Cloning GIT =========="
          script{
            try{
              checkout([$class: 'GitSCM', branches: [[name: '${BRANCH}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: '${GIT_URL}']]])
            }catch(err){
              currentBuild.result = "FAILURE"
              error("Error copying from git repository")
              return;
            }
	    currentBuild.result = "SUCCESS"
	    
	    if(BUILD_TYPE.equals('develop')){
	      REPO = "${JOB_NAME}"  
	    }else if(BUILD_TYPE.equals('pre-release')){
              REPO = "${JOB_NAME}.pre-release"  
            }else if(BUILD_TYPE.equals('release')){
                REPO = "${JOB_NAME}.release"
            }
            
            if(BUILD_TYPE.equals('pre-release') || BUILD_TYPE.equals('release')){
                stage("Compress and upload source code"){
                    echo "========== Cloning GIT for compress source to tar =========="
                    is_result_shell_build("git clone ssh://bezpalko_p@10.10.199.35/opt/git/ormp_nexus","Can't git clone")
                    echo "========== Compress source to tar =========="
                    is_result_shell_build("${WORKSPACE}/ormp_nexus/sources.py ${JOB_NAME}","Can't compress source to tar")
                    echo "========== Upload tar file to repo =========="
                    is_result_shell_build("${WORKSPACE}/ormp_nexus/upload_files_to_repo.py ${WORKSPACE}/source roschat-sources ${JOB_NAME} ${FOLDER}","Can't push tar to roschat-sources")    
                }
            }
          }
        }
      }
      stage("Build linux client"){
        steps{
          echo "========== Build linux client =========="
          is_result_shell_build("$BUILD_CMD","Can't build linux client")
        }
      }
      stage("Cleaning build directory on macos"){
        agent { label 'macos' }
        steps{
          echo "========== Cleaning build directory on macos =========="
          script{
            is_result_shell_build("rm -rf /Users/developer/darwin/*","Can't clear build directory on macos")
          }
        }
      }
      stage("Build macos client"){
        steps{
	  echo "========== Copying data for build on macos =========="
          is_result_shell_build("scp -r ${WORKSPACE}/clients/demo/darwin/РосЧат-darwin-x64/* developer@10.10.38.175:/Users/developer/darwin/","Can't copying data on macos")
          echo "========== Running build client on macos =========="
          is_result_shell_build("sshpass -p 'develop' ssh developer@10.10.38.175 '/usr/local/bin/node /usr/local/bin/electron-installer-dmg darwin/РосЧат.app  --overwrite darwin/roschat-${VERSION}-${BUILD_NUMBER}'","Can't build macos client")
          echo "========== Create directory for macos =========="
          is_result_shell_build("mkdir -p ${WORKSPACE}/result/macos/x64","Can't create directory for macos")
          echo "========== Pull macos =========="
          is_result_shell_build("scp -r developer@10.10.38.175:/Users/developer/darwin/roschat-${VERSION}-${BUILD_NUMBER}.dmg ${WORKSPACE}/result/macos/x64/roschat-${VERSION}.${BUILD_NUMBER}.dmg","Can't pull macos")
        }
      }
      stage("Create temp directory for client of windows"){
        steps{
          echo "========== Creating temp directory for client of windows/x64 =========="
          is_result_shell_build("mkdir -p ${WORKSPACE}/result/windows/x64","Can't create temp directory for client of windows/x64")
	  echo "========== Creating temp directory for client of windows/ia32 =========="
          is_result_shell_build("mkdir -p ${WORKSPACE}/result/windows/ia32","Can't create temp directory for client of windows/ia32")
        }
      }	  
      stage("Build windows x64 client"){
        steps{
          echo "========== Build client for windows/x64 =========="
          is_result_shell_build("electron-builder --win --x64 --project ${WORKSPACE}/clients/demo/js/electron","Can't build client of windows/x64")
	  echo "========== Signing ssl code to client of windows/x64 =========="
          is_result_shell_build("osslsigncode sign -pkcs12 /var/opt/n1.pfx -pass V090807It -h sha2 -t http://timestamp.comodoca.com/authenticode -in ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe -out ${WORKSPACE}/result/windows/x64/roschat-${VERSION}.${BUILD_NUMBER}.x64.exe","Can't singing ssl code to client of windows/x64")
	  echo "========== Delete exe file after build client of windows/x64 =========="
          is_result_shell_build("rm -f ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe","Can't delete exe file after build client of windows/x64")
        }
      }
      stage("Build windows ia32 client"){
        steps{
          echo "========== Build client for windows/ia32 =========="
          is_result_shell_build("electron-builder --win --ia32 --project ${WORKSPACE}/clients/demo/js/electron","Can't build client of windows/ia32")
	  echo "========== Signing ssl code to client of windows/ia32 =========="
	  is_result_shell_build("osslsigncode sign -pkcs12 /var/opt/n1.pfx -pass V090807It -h sha2 -t http://timestamp.comodoca.com/authenticode -in ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe -out ${WORKSPACE}/result/windows/ia32/roschat-${VERSION}.${BUILD_NUMBER}.ia32.exe","Can't singing ssl code to client of windows/ia32")
	  echo "========== Delete exe file after build client of windows/ia32 =========="
          is_result_shell_build("rm -f ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe","Can't delete exe file after build client of windows/ia32")
        }
      }
      stage("Upload clients to repo"){
          steps{
              script{
               if(BUILD_TYPE.equals('develop')){
                echo "========== Cloning git for upload clients to repo ========="
                is_result_shell_build("git clone ssh://bezpalko_p@10.10.199.35/opt/git/ormp_nexus","Can't git clone for upload files to ${REPO}")
                }
                echo "========== Upload files to repo ========="
                is_result_shell_build("/${WORKSPACE}/ormp_nexus/upload_files_to_repo.py ${WORKSPACE}/result/ ${REPO} ${FOLDER}","Can't push linux client to repo")       
              }
          }
        }
    }
}