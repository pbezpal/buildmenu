<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue>0.0.0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description></description>
          <defaultValue>ssh://shavlovskiy_sn@10.10.199.35/opt/git/firelink/web_server</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_CMD</name>
          <description></description>
          <defaultValue>make</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_TIME</name>
          <description></description>
          <defaultValue>_</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TYPE</name>
          <description></description>
          <defaultValue>server</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_TYPE</name>
          <description></description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.81">
    <script>#!groovy

String BRANCH = &quot;${params.BRANCH}&quot;
String VERSION = &quot;${params.VERSION}&quot;
String BUILD_CMD = &quot;${params.BUILD_CMD}&quot;
String TYPE = &quot;${params.TYPE}&quot;
String GIT_URL = &quot;${params.GIT_URL}&quot;
String BUILD_TIME = &quot;${params.BUILD_TIME}&quot;
String BUILD_TYPE = &quot;${params.BUILD_TYPE}&quot;
String CURRENT_DATE = new Date().format(&apos;yyyy-MM-dd-HH-mm&apos;, TimeZone.getTimeZone(&quot;Europe/Moscow&quot;))
String FOLDER = &quot;${CURRENT_DATE}-${params.VERSION}-${BUILD_NUMBER}&quot;
String REPO = null

def is_result_shell_build(command,text){
    if(currentBuild.result == &apos;SUCCESS&apos;){
        try{
            sh command    
        }catch(err){
            currentBuild.result = &apos;FAILURE&apos;
            error(text)
        }
    }
}

pipeline{
    agent {
        label &apos;debian&apos;
    }
    options { timestamps () }
    stages{
      
      stage(&quot;Cleaning the build directory&quot;){
        steps{
          deleteDir();
        }
      }
      stage(&quot;Cloning from a git repository&quot;){
        steps{
          echo &quot;========== Cloning GIT ==========&quot;
          script{
            try{
              checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;${BRANCH}&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;${GIT_URL}&apos;]]])
            }catch(err){
              currentBuild.result = &quot;FAILURE&quot;
              error(&quot;Error copying from git repository&quot;)
	          return;
            }
		    currentBuild.result = &quot;SUCCESS&quot;
		    if(BUILD_TYPE.equals(&apos;develop&apos;)) REPO = &apos;roschat-client&apos;
		    else{
		        REPO = &apos;roschat-client.release&apos;
		        is_result_shell_build(&quot;rsync -r -e ${WORKSPACE}/* /ftp/releases/RosChat/${TYPE}/${JOB_NAME}/${FOLDER}/&quot;,&quot;Error copying source code to ftp&quot;)
		    }
          }
        }
      }
      stage(&quot;Build linux client&quot;){
        steps{
          echo &quot;========== Build linux client ==========&quot;
          is_result_shell_build(&quot;$BUILD_CMD&quot;,&quot;Can&apos;t build linux client&quot;)
          echo &quot;========== Push linux client to repo ==========&quot;
          is_result_shell_build(&quot;/opt/push_linux_client.sh ${WORKSPACE}/result/linux/ ${REPO} ${FOLDER}&quot;,&quot;Can&apos;t push linux client to repo&quot;)
        }
      }
      stage(&quot;Cleaning build directory on macos&quot;){
        agent { label &apos;macos&apos; }
        steps{
          echo &quot;========== Cleaning build directory on macos ==========&quot;
          script{
            is_result_shell_build(&quot;rm -rf /Users/developer/darwin/*&quot;,&quot;Can&apos;t clear build directory on macos&quot;)
          }
        }
      }
	  stage(&quot;Build macos client&quot;){
        steps{
		  echo &quot;========== Copying data for build on macos ==========&quot;
          is_result_shell_build(&quot;scp -r ${WORKSPACE}/clients/demo/darwin/РосЧат-darwin-x64/* developer@10.10.38.175:/Users/developer/darwin/&quot;,&quot;Can&apos;t copying data on macos&quot;)
          echo &quot;========== Running build client on macos ==========&quot;
          is_result_shell_build(&quot;sshpass -p &apos;develop&apos; ssh developer@10.10.38.175 &apos;/usr/local/bin/node /usr/local/bin/electron-installer-dmg darwin/РосЧат.app  --overwrite darwin/roschat-${VERSION}-${BUILD_NUMBER}&apos;&quot;,&quot;Can&apos;t build macos client&quot;)
          echo &quot;========== Push macos client to repo ==========&quot;
          is_result_shell_build(&quot;sshpass -p &apos;develop&apos; ssh developer@10.10.38.175 curl -v -u &apos;admin:Y@rd87846259&apos; --upload-file /Users/developer/darwin/roschat-${VERSION}-${BUILD_NUMBER}.dmg http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/macos/x64/roschat-${VERSION}-${BUILD_NUMBER}.dmg&quot;,&quot;Can&apos;t push macos client to repo&quot;)
        }
      }
	  stage(&quot;Create temp directory for client of windows&quot;){
        steps{
          echo &quot;========== Creating temp directory for client of windows/x64 ==========&quot;
          is_result_shell_build(&quot;mkdir -p ${WORKSPACE}/result/windows/x64&quot;,&quot;Can&apos;t create temp directory for client of windows/x64&quot;)
		  echo &quot;========== Creating temp directory for client of windows/ia32 ==========&quot;
          is_result_shell_build(&quot;mkdir -p ${WORKSPACE}/result/windows/ia32&quot;,&quot;Can&apos;t create temp directory for client of windows/ia32&quot;)
        }
      }	  
	  stage(&quot;Build client of windows x64&quot;){
        steps{
          echo &quot;========== Build client of windows/x64 ==========&quot;
          is_result_shell_build(&quot;electron-builder --win --x64 --project ${WORKSPACE}/clients/demo/js/electron&quot;,&quot;Can&apos;t build client of windows/x64&quot;)
		  echo &quot;========== Signing ssl code to client of windows/x64 ==========&quot;
          is_result_shell_build(&quot;osslsigncode sign -pkcs12 /var/opt/n1.pfx -pass V090807It -h sha2 -t http://timestamp.comodoca.com/authenticode -in ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe -out ${WORKSPACE}/result/windows/x64/roschat-${VERSION}.${BUILD_NUMBER}.x64.exe&quot;,&quot;Can&apos;t singing ssl code to client of windows/x64&quot;)
		  echo &quot;========== Delete exe file after build client of windows/x64 ==========&quot;
          is_result_shell_build(&quot;rm -f ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe&quot;,&quot;Can&apos;t delete exe file after build client of windows/x64&quot;)
          echo &quot;========== Push client of windows/x64 to repo ==========&quot;
          is_result_shell_build(&quot;curl -v -u &apos;admin:Y@rd87846259&apos; --upload-file ${WORKSPACE}/result/windows/x64/roschat-${VERSION}.${BUILD_NUMBER}.x64.exe http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/windows/x64/roschat-${VERSION}.${BUILD_NUMBER}.x64.exe&quot;,&quot;Can&apos;t push client of windows/x64 to repo&quot;)
        }
      }
	  stage(&quot;Build client of windows/ia32&quot;){
        steps{
          echo &quot;========== Build client of windows/ia32 ==========&quot;
          is_result_shell_build(&quot;electron-builder --win --ia32 --project ${WORKSPACE}/clients/demo/js/electron&quot;,&quot;Can&apos;t build client of windows/ia32&quot;)
		  echo &quot;========== Signing ssl code to client of windows/ia32 ==========&quot;
		  is_result_shell_build(&quot;osslsigncode sign -pkcs12 /var/opt/n1.pfx -pass V090807It -h sha2 -t http://timestamp.comodoca.com/authenticode -in ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe -out ${WORKSPACE}/result/windows/ia32/roschat-${VERSION}.${BUILD_NUMBER}.ia32.exe&quot;,&quot;Can&apos;t singing ssl code to client of windows/ia32&quot;)
		  echo &quot;========== Delete exe file after build client of windows/ia32 ==========&quot;
          is_result_shell_build(&quot;rm -f ${WORKSPACE}/clients/demo/js/electron/dist/roschat-${VERSION}.${BUILD_NUMBER}.exe&quot;,&quot;Can&apos;t delete exe file after build client of windows/ia32&quot;)
          echo &quot;========== Push client of windows/x64 to repo ==========&quot;
          is_result_shell_build(&quot;curl -v -u &apos;admin:Y@rd87846259&apos; --upload-file ${WORKSPACE}/result/windows/ia32/roschat-${VERSION}.${BUILD_NUMBER}.ia32.exe http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/windows/ia32/roschat-${VERSION}.${BUILD_NUMBER}.ia32.exe&quot;,&quot;Can&apos;t push client of windows/ia32 to repo&quot;)
        }
      }
    }
    post{
        always{
            script{
                if(currentBuild.result != &quot;SUCCESS&quot;){
                    sh &quot;/opt/delete_linux_client.sh ${WORKSPACE}/result/linux/ ${REPO} ${FOLDER}&quot;
                    sh &quot;curl -v -u &apos;admin:Y@rd87846259&apos; -X DELETE http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/macos/x64/roschat-${VERSION}-${BUILD_NUMBER}.dmg&quot;
                    sh &quot;curl -v -u &apos;admin:Y@rd87846259&apos; -X DELETE http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/windows/x64/roschat-${VERSION}.${BUILD_NUMBER}.x64.exe&quot;
                    sh &quot;curl -v -u &apos;admin:Y@rd87846259&apos; -X DELETE http://10.10.199.217:8080/repository/${REPO}/${FOLDER}/windows/ia32/roschat-${VERSION}.${BUILD_NUMBER}.ia32.exe&quot;
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>110afafd6a5bbe698b1e69a37390daaafd</authToken>
  <disabled>false</disabled>
</flow-definition>