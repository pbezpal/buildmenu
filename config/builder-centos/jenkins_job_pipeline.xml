<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue>0.0.0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description></description>
          <defaultValue>ssh://shavlovskiy_sn@10.10.199.35/opt/git/firelink/web_server</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_CMD</name>
          <description></description>
          <defaultValue>make</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TYPE</name>
          <description></description>
          <defaultValue>server</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_TYPE</name>
          <description></description>
          <defaultValue>relsease</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.81">
    <script>#!groovy

String BRANCH = &quot;${params.BRANCH}&quot;
String VERSION = &quot;${params.VERSION}&quot;
String BUILD_CMD = &quot;${params.BUILD_CMD}&quot;
String TYPE = &quot;${params.TYPE}&quot;
String GIT_URL = &quot;${params.GIT_URL}&quot;
String BUILD_TYPE = &quot;${params.BUILD_TYPE}&quot;

def is_result_shell_build(command,text){
    if(currentBuild.result == &apos;SUCCESS&apos;){
        try{
            sh command    
        }catch(err){
            error(text)
            currentBuild.result = &apos;ABORTED&apos;
        }
    }
}

pipeline{
    agent {
        label &apos;centos&apos;
    }
    options { timestamps () }
    stages{
      
      stage(&quot;Cleaning the build directory&quot;){
        steps{
          deleteDir();
        }
      }
      stage(&quot;Cloning from a git repository&quot;){
        steps{
          echo &quot;========== Cloning GIT ==========&quot;
          script{
            try{
              checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;${BRANCH}&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;${GIT_URL}&apos;]]])
            }catch(err){
              currentBuild.result = &quot;ABORTED&quot;
              error(&quot;Error copying from git repository&quot;)
	          return;
            }
		    currentBuild.result = &quot;SUCCESS&quot;
          }
        }
      }
      stage(&quot;Build rpm&quot;){
        steps{
          echo &quot;========== Build ${JOB_NAME}_${VERSION}-${BUILD_NUMBER} ==========&quot;
          is_result_shell_build(&quot;$BUILD_CMD&quot;,&quot;The result of the assembly - failed&quot;)
        }
      }
      stage(&quot;Push rpm to repo&quot;){
        steps{
          echo &quot;========== Push ${JOB_NAME}_${VERSION}-${BUILD_NUMBER} to repo ==========&quot;
          script{
            if(currentBuild.result == &apos;SUCCESS&apos;){
                if(BUILD_TYPE.equals(&apos;release&apos;)){
                    try{
                        sh &apos;&apos;&apos;#!/bin/bash
                          folder=`date +\&apos;%d.%m.%Y_%H:%M\&apos;`_${VERSION}-${BUILD_NUMBER}
                          for rpm in `ls ${WORKSPACE}/result/`
                          do
                            curl -v --user &apos;admin:Y@rd87846259&apos; --upload-file ${WORKSPACE}/result/$rpm http://10.10.199.217:8080/repository/${JOB_NAME}.release/$folder/$rpm
                          done&apos;&apos;&apos;   
                    }catch(err){
                        error(text)
                        currentBuild.result = &apos;ABORTED&apos;
                    }
                }else if(BUILD_TYPE.equals(&apos;office&apos;)){
                    try{
                        sh &apos;&apos;&apos;#!/bin/bash
                          folder=`date +\&apos;%d.%m.%Y_%H:%M\&apos;`_${VERSION}-${BUILD_NUMBER}
                          for rpm in `ls ${WORKSPACE}/result/`
                          do
                            curl -v --user &apos;admin:Y@rd87846259&apos; --upload-file ${WORKSPACE}/result/$rpm http://10.10.199.217:8080/repository/${JOB_NAME}.office/$folder/$rpm
                          done&apos;&apos;&apos;   
                    }catch(err){
                        error(text)
                        currentBuild.result = &apos;ABORTED&apos;
                    }
                }
            }  
          }
        }
      }
      stage(&quot;Rsync rpm for build and testing server&quot;){
        steps{
          script{
            if(BUILD_TYPE.equals(&apos;release&apos;)){
              echo &quot;========== Rsync ${JOB_NAME}_${VERSION}-${BUILD_NUMBER} on server ==========&quot;
              is_result_shell_build(&quot;ssh root@10.10.199.47 rm -f /tmp/rpms/${JOB_NAME}-*&quot;,&quot;Can&apos;t remove old version snmp&quot;)
              is_result_shell_build(&quot;rsync ${WORKSPACE}/result/* root@10.10.199.47:/tmp/rpms&quot;,&quot;Can&apos;t remove old version snmp&quot;)
              is_result_shell_build(&quot;echo ${JOB_NAME}_${VERSION}-${BUILD_NUMBER} &gt; /tmp/build&quot;,&quot;Can&apos;t remove old version snmp&quot;)
              is_result_shell_build(&quot;rsync /tmp/build root@10.10.199.47:/tmp&quot;,&quot;Can&apos;t remove old version snmp&quot;)
              is_result_shell_build(&quot;rm -f /tmp/build&quot;,&quot;Can&apos;t remove old version snmp&quot;)    
            }else{
                echo &quot;========== Build for office ==========&quot;
            }
          }
        }
      }
      stage(&quot;Run job build server&quot;){
        steps{
          script{
            if(currentBuild.result == &apos;SUCCESS&apos;){
                if(BUILD_TYPE.equals(&apos;release&apos;)){
                    build job: &apos;roschat-server_docker&apos;, wait: false   
                }else{
                    echo &quot;========== Build for office ==========&quot;
                }
            }
          }
        }
      }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>110afafd6a5bbe698b1e69a37390daaafd</authToken>
  <disabled>false</disabled>
</flow-definition>