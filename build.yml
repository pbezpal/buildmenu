---
- name: Build
  hosts: windows_setup
  # become: True
  vars:
      - win_work_dir: C:\build\src\roschat
      - index: 0
      # - appname: РосЧат
  tasks:
      - name: Tag
        debug:
            var: tag
      # #########Перенёс в build.py################
      # - name: Build www dependencies
      #   shell: npm i
      #   args:
      #       chdir: '{{ local_src_dir }}/clients/demo/'
      #       executable: /bin/bash
      #   delegate_to: localhost
      # - name: Run gulp #TODO: убрать gulp
      #   shell: gulp
      #   args:
      #       chdir: '{{ local_src_dir }}/clients/demo/'
      #       executable: /bin/bash
      #   delegate_to: localhost
      # - name: Create electron app config directory
      #   file:
      #       path: '{{ local_src_dir }}/clients/demo/dist/resources/app'
      #       state: directory
      #   delegate_to: localhost
      - name: Copy electron builder config
        template:
            src: ./resources/app/package.json.tpl
            dest: '{{ local_src_dir }}/clients/demo/dist/resources/app/package.json'
        delegate_to: localhost
      - name: Copy www app files into electron app
        copy:
            src: '{{ local_src_dir }}/clients/demo/dist'
            dest: '{{ local_src_dir }}/clients/demo/js/electron/'
        delegate_to: localhost
      - name: Copy electron package.json
        template:
            src: ./resources/app/package.json.tpl
            dest: '{{ local_src_dir }}/clients/demo/js/electron/package.json'
        delegate_to: localhost
      - name: Build electron dependencies
        shell: npm i
        args:
            chdir: '{{ local_src_dir }}/clients/demo/js/electron/'
            executable: /bin/bash
        delegate_to: localhost
      # - name: Rebuild modules
      #   shell: $(npm bin)/electron-rebuild
      #   args:
      #       chdir: '{{ local_src_dir }}/clients/demo/js/electron/'
      #       executable: /bin/bash
      #   delegate_to: localhost
      # - name: Copy license file into electron app
      #   copy:
      #       src: '{{ local_src_dir }}/clients/demo/license.txt'
      #       dest: '{{ local_src_dir }}/clients/demo/js/electron/license.txt'
      #   delegate_to: localhost
    #electron-packager . electron-tutorial-app --overwrite --asar=true --platform=linux --arch=x64 --icon=assets/icons/png/1024x1024.png --prune=true --out=release-builds
      - name: Build electron app for Linux
        shell: 'electron-packager . РосЧат --overwrite --asar=true --platform=linux --arch=x64 --icon=/home/apterion/develop/ansible/src/roschat/roschat5.png --prune=true --out=release-builds --electronVersion {{electron_version}}'
        args:
            chdir: '{{ local_src_dir }}/clients/demo/js/electron'
            executable: /bin/bash
        delegate_to: localhost
      - name: Build electron app for Windows
        shell: 'electron-packager . РосЧат --overwrite --platform win32 --arch x64 --icon /home/apterion/develop/ansible/src/roschat/roschat5.ico --out ./dst  --electronVersion {{electron_version}}'
        args:
            chdir: '{{ local_src_dir }}/clients/demo/js/electron'
            executable: /bin/bash
        delegate_to: localhost
      - name: Build electron app for Mac OS
        shell: 'electron-packager . --overwrite --platform=darwin --arch=x64 --icon ~/develop/ansible/src/roschat/roschat5.ico --prune=true --out=release-builds --electronVersion={{electron_version}} roschat'
        args:
            chdir: '{{ local_src_dir }}/clients/demo/js/electron'
            executable: /bin/bash
        delegate_to: localhost
      - name: Create folder
        win_file:
            path: '{{ win_work_dir }}\compile'
            state: directory
      - name: Create folder
        win_file:
            path: '{{ win_work_dir }}\client'
            state: directory
      - name: Export sources
        win_copy:
            src: '{{ local_src_dir }}/clients/demo/js/electron'
            dest: '{{ win_work_dir }}\client'
      - name: Export license file
        win_copy:
            src: '{{ local_src_dir }}/clients/demo/js/electron/license.txt'
            dest: '{{ win_work_dir }}\compile\license.txt'
      - name: Export Inno Setup script
        template:
            src: ./roschat_inno_setup.tpl
            dest: '{{ win_work_dir }}\compile\roschat_inno_setup.iss'
      - name: Build RosChat installer by Inno setup
        win_psexec:
            command: '"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "{{ win_work_dir }}\compile\roschat_inno_setup.iss"'
      - name: Import setup file
        fetch:
            src: 'C:\inno_setup_files\RosChat setup.exe'
            dest: './setup_files/RosChat setup-{{ tag }}.exe'
            flat: true
############
    # - name: Get source from repository
    #   raw: git clone ssh://shavlovskiy_sn:123456@10.10.199.35/opt/git/firelink/web_server C:\setup\src
      # git:
      #     repo: 'ssh://shavlovskiy_sn:123456@10.10.199.35/opt/git/firelink/web_server'
      #     dest: C:\setup\src
          # version: release-0.22
